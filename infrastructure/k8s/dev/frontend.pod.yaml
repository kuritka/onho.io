apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: onho-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        env: dev
        app: frontend
    spec:
      restartPolicy: Always
      containers:
      - name: frontend
        image: acronhosbx.azurecr.io/frontend:0.13
        args: [frontend]
        ports:
        - containerPort: 8081
        env:
          -  name: ONHO_RABBIT_CONNECTION_STRING
             valueFrom:
               secretKeyRef:
                 name: onho-secrets
                 key: rabbit-mq-connection-string
          -  name: ONHO_OAUTH_CLIENTID
             valueFrom:
               secretKeyRef:
                 name: onho-secrets
                 key: github-oauth-client-id
          -  name: ONHO_OAUTH_COOKIE_KEY
             valueFrom:
               secretKeyRef:
                 name: onho-secrets
                 key: cookie-key
          -  name: ONHO_OAUTH_CLIENT_SECRET
             valueFrom:
               secretKeyRef:
                 name: onho-secrets
                 key: github-oauth-client-secret
          -  name: ONHO_CLIENT_PORT
             valueFrom:
               configMapKeyRef:
                 name: configmap-onho-dev
                 key: frontend.client.port
          -  name: ONHO_ENVIRONMENT
             valueFrom:
               configMapKeyRef:
                 name: configmap-onho-dev
                 key: onho.environment
        #Kubernetes uses readiness probes to decide when the container is available for accepting traffic.
        #The readiness probe is used to control which pods are used as the backends for a service.
        #A pod is considered ready when all of its containers are ready.
        #If a pod is not ready, it is removed from service load balancers.
        #For example, if a container loads a large cache at startup and takes minutes to start, you do not want to send requests to this container until it is ready, or the requests will fail—you want to route requests to other pods, which are capable of servicing requests.
        readinessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 20
          timeoutSeconds: 5
          periodSeconds: 20
        #Kubernetes uses liveness probes to know when to restart a container.
        #If a container is unresponsive—perhaps the application is deadlocked due to a
        #multi-threading defect—restarting the container can make the application more available, despite the defect.
        #It certainly beats paging someone in the middle of the night to restart a container
        livenessProbe:
          httpGet:
            path: /health
            port: 8081
          initialDelaySeconds: 20
          timeoutSeconds: 5
          periodSeconds: 20


